import discord
from discord.ext import commands
from discord import app_commands
from random import randint, choice
import re

from utils.emojis import Emojis
from utils.shortcuts import no_ping, no_color

normal2sga_table = {
	"a": "·îë",
	"b": " ñ",
	"c": "·ìµ",
	"d": "‚Ü∏",
	"e": "·í∑",
	"f": "‚éì",
	"g": "‚ä£",
	"h": "‚çë",
	"i": "‚ïé",
	"j": "‚ãÆ",
	"k": "Íñå",
	"l": "Íñé",
	"m": "·í≤",
	"n": "„É™",
	"o": "ùôπ",
	"p": "!¬°",
	"q": "·ëë",
	"r": "‚à∑",
	"s": "·ì≠",
	"t": "‚Ñ∏",
	"u": "Ã£",
	"v": "‚öç",
	"w": "‚à¥",
	"x": "ÃáÃá/",
	"y": "||",
	"z": "‚®Ö"
}
sga2normal_table = {
	"·îë": "a",
	" ñ": "b",
	"·ìµ": "c",
	"‚Ü∏": "d",
	"·í∑": "e",
	"‚éì": "f",
	"‚ä£": "g",
	"‚çë": "h",
	"‚ïé": "i",
	"‚ãÆ": "j",
	"Íñå": "k",
	"Íñé": "l",
	"·í≤": "m",
	"„É™": "n",
	"ùôπ": "o",
	"!¬°": "p",
	"·ëë": "q",
	"‚à∑": "r",
	"·ì≠": "s",
	"‚Ñ∏": "t",
	"Ã£": "u",
	"‚öç": "v",
	"‚à¥": "w",
	"ÃáÃá/": "x",
	"||": "y",
	"‚®Ö": "z",
	"\u200b": ""
}

class FunCommands(commands.Cog, name="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"):
	def __init__(self, bot):
		self.bot = bot
		
	@commands.hybrid_command(aliases=["ench", "–∑–∞—á–∞—Ä–æ–≤–∞—Ç—å", "–∑–∞—á–∞—Ä–∏—Ç—å", "–∑–∞—á–∞—Ä—å", "–∑–∞—á–∞—Ä—É–π", "—É—Ç—Å—Ä", "—É—Ç—Å—Ä—Ñ—Ç–µ"],
				  description="–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —è–∑—ã–∫ —Å—Ç–æ–ª–∞ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è")
	@app_commands.describe(text="–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —è–∑—ã–∫ —Å—Ç–æ–ª–∞ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏–π")
	async def enchant(self, ctx, *, text: str):
		enchanted = text
		for char in normal2sga_table:
			enchanted = enchanted.replace(char, normal2sga_table[char]+"\u200b")
		await ctx.reply(enchanted, allowed_mentions=no_ping)
	@enchant.error
	async def enchant_error(self, ctx, error):
		if isinstance(error, commands.MissingRequiredArgument):
			await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞—á–∞—Ä–æ–≤–∞—Ç—å")
		
	@commands.hybrid_command(aliases=["unench", "—Ä–∞–∑–∑–∞—á–∞—Ä–æ–≤–∞—Ç—å", "—Ä–∞–∑—á–∞—Ä–∏—Ç—å", "—Ä–∞–∑—á–∞—Ä—å", "—Ä–∞–∑—á–∞—Ä—É–π", "–≥—Ç—É—Ç—Å—Ä", "–≥—Ç—É—Ç—Å—Ä—Ñ—Ç–µ"],
				  description="–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —è–∑—ã–∫–∞ —Å—Ç–æ–ª–∞ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è")
	@app_commands.describe(text="–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å —è–∑—ã–∫–∞ —Å—Ç–æ–ª–∞ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏–π")
	async def unenchant(self, ctx, *, text: str):
		unenchanted = text
		for char in sga2normal_table:
			unenchanted = unenchanted.replace(char, sga2normal_table[char])
		await ctx.reply(unenchanted, allowed_mentions=no_ping)
	@unenchant.error
	async def unenchant_error(self, ctx, error):
		if isinstance(error, commands.MissingRequiredArgument):
			await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–∑–∞—á–∞—Ä–æ–≤–∞—Ç—å")

	@commands.hybrid_command(aliases=["random-range", "rr", "—Ä–∞–Ω–¥–æ–º-—á–∏—Å–ª–æ", "—Å–≥–µ–Ω–µ—Ä—å-—á–∏—Å–ª–æ", "–∫—Ñ—Ç–≤—â—å-–∫—Ñ—Ç–ø—É", "–∫–∫"],
				  description="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ")
	@app_commands.describe(minimum="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ", maximum="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ")
	async def randomrange(self, ctx, minimum: str='-2147483648', maximum: str='2147483647'):
		minInt, maxInt = -2147483648, 2147483647
		clamp = lambda n, minn, maxn: max(min(maxn, n), minn)
		minimum, maximum = clamp(int(float(minimum)), minInt, maxInt), clamp(int(float(maximum)), minInt, maxInt)
		minimum = min(minimum, maximum)
		maximum = max(minimum, maximum)
		result = randint(minimum, maximum)
		embed = discord.Embed(color=no_color, title=f"–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É {minimum} –∏ {maximum}:")
		embed.add_field(name=result, value='', inline=True)
		await ctx.reply(embed=embed, allowed_mentions=no_ping)
	@randomrange.error
	async def randomrange_error(self, ctx, error):
		eArg = str(error).split("'")[1].replace("\\\\", "\\")
		await ctx.reply(f"‚ùó –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - `{eArg}`. –î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", allowed_mentions=no_ping)

	@commands.hybrid_command(aliases=["rand", "r", "rng", "—Ä–∞–Ω–¥–æ–º", "—Ä–∞–Ω–¥", "—Å–ª—É—á–∞–π–Ω—ã–π-–æ—Ç–≤–µ—Ç", "—Å–≥–µ–Ω–µ—Ä—å-–æ—Ç–≤–µ—Ç", "–∫—Ñ—Ç–≤—â—å", "–∫—Ñ—Ç–≤", "–∫", "–∫—Ç–ø"],
				  description="–í—ã–¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å. [text] —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º \"|\" –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏")
	@app_commands.describe(text="–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–æ–≤. –†–∞–∑–¥–µ–ª—è—é—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º \"|\" –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏")
	async def random(self, ctx, *, text: str):
		pattern = r'[|\n]'
		args = re.split(pattern, text)[1:]
		title = re.split(pattern, text)[0]
		result = choice(args)
		embed = discord.Embed(title=title, color=no_color)
		embed.add_field(name="–û—Ç–≤–µ—Ç:", value=result, inline=False)
		await ctx.reply(embed=embed, allowed_mentions=no_ping)
	@random.error
	async def random_error(self, ctx, error):
		embed = discord.Embed(title="–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤?", color=no_color)
		embed.add_field(name="–û—Ç–≤–µ—Ç:", value="–î–∞")
		await ctx.reply(embed=embed, allowed_mentions=no_ping)
	
	@commands.hybrid_command(name="look-for", aliases=["q"])
	async def look_for(self, ctx, game: str, *, details: str):
		# Building embed
		embed = discord.Embed(title=f"üîé –ò—â—É —Ç–∏–º–º–µ–π—Ç–∞ –¥–ª—è {game}", color=no_color)
		embed.set_author(name=ctx.author.name, icon_url=ctx.author.avatar.url)
		embed.add_field(name="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", value=details, inline=False)
		embed.add_field(name="‚úÖ–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å", value="")
		embed.add_field(name="‚ùé–û—Ç–∫–ª–æ–Ω–∏–ª–∏", value="")
		if game in ["minecraft", "terraria", "gartic"]:
			game_banner = discord.File(f"assets/game_banners/{game}.png", filename="say_gex.png")
			embed.set_image(url="attachment://say_gex.png")
		await ctx.send(embed=embed, view=LookFor(), file=game_banner)


class LookFor(discord.ui.View):
	def __init__(self):
		super().__init__()
	
	async def response(ctx, action):
		# Setting up variables
		embed = ctx.message.embeds[0]
		joined_users = embed.fields[1].value.split("\n")
		declined_users = embed.fields[2].value.split("\n")
		action_users_list = joined_users if action == "join" else declined_users
		opposite_users_list = declined_users if action == "join" else joined_users
		# Building embed
		usr_ping = ctx.user.mention
		if usr_ping not in action_users_list:
			action_users_list.append(usr_ping)
		else:
			action_users_list.remove(usr_ping)
		if usr_ping in opposite_users_list:
			opposite_users_list.remove(usr_ping)
		embed.set_field_at(1, name=embed.fields[1].name, value="\n".join(joined_users))
		embed.set_field_at(2, name=embed.fields[2].name, value="\n".join(declined_users))
		await ctx.response.edit_message(embed=embed, attachments=[])
	
	@discord.ui.button(label="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è", emoji=Emojis.android, style=discord.ButtonStyle.gray)
	async def join(self, ctx: discord.Interaction, button: discord.ui.Button):
		await LookFor.response(ctx, "join")
	
	@discord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—Å—è", emoji=Emojis.exe, style=discord.ButtonStyle.gray)
	async def decline(self, ctx: discord.Interaction, button: discord.ui.Button):
		await LookFor.response(ctx, "decline")
