import discord
from discord.ext import commands
from discord import app_commands
from asyncio import sleep
from datetime import timedelta
from re import findall
from Levenshtein import distance

from utils.msg_utils import Emojis

from utils.shortcuts import no_ping, no_color

time_multipliers = {
	"y": 31556952,
	"mo": 2678400,
	"w": 604800,
	"d": 86400,
	"h": 3600,
	"m": 60,
	"s": 1,
	"–≥": 31556952,
	"–º–µ": 2678400,
	"–Ω": 604800,
	"–¥": 86400,
	"—á": 3600,
	"–º": 60,
	"—Å": 1
}
time_names = {
	"—Å–µ–∫—É–Ω–¥": ["s", "—Å"],
	"–º–∏–Ω—É—Ç": ["m", "–º"],
	"—á–∞—Å–æ–≤": ["h", "—á"],
	"–¥–Ω–µ–π": ["d", "–¥"],
	"–Ω–µ–¥–µ–ª—å": ["w", "–Ω"],
	"–º–µ—Å—è—Ü–µ–≤": ["mo", "–º–µ"],
	"–ª–µ—Ç": ["y", "–≥"]
}

help_attrs = {'name': 'help', 'aliases': ["helps", "—Ö–µ–ª–ø", "h", "—Ä—É–¥–∑", "—Ä—É–¥–∑—ã", "—Ö", "—Ä"]}
class CustomHelpCommand(commands.HelpCommand):

	async def send_bot_help(self, mapping):
		embed = discord.Embed(title="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ AntBot-a", color=no_color)
		thumbnail = discord.File("assets/pfps/online.png", filename="online.png")
		embed.set_thumbnail(url="attachment://online.png")
		for cog, cmds in mapping.items():
			cmd_str = ", ".join(f"`{cmd.name}`" for cmd in cmds)
			cmd_signature = [self.get_command_signature(cmd) for cmd in cmds]
			cog_name = getattr(cog, "qualified_name", "no_help")
			if not cog_name.startswith("no_help"):
				embed.add_field(name=cog_name, value=cmd_str, inline=False)
		await self.context.reply(embed=embed, file=thumbnail, allowed_mentions=no_ping)
	
	async def send_command_help(self, cmd):
		embed = discord.Embed(title=f"–ö–æ–º–∞–Ω–¥–∞ `{cmd.name}`", color=no_color)
		embed.description = cmd.description
		params = ""
		if cmd.clean_params != {}: params = " " + " ".join(f"[{param}]" for param in cmd.clean_params)
		embed.add_field(name="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", value=f"`{self.context.clean_prefix}{cmd.name}{params}`", inline=False)
		alias_str = ", ".join(f"`{alias}`" for alias in cmd.aliases)
		embed.add_field(name="–ê–ª–∏–∞—Å—ã", value=alias_str, inline=False)
		await self.context.reply(embed=embed, allowed_mentions=no_ping)
	
	async def command_not_found(self, string: str) -> str:
		possible_cmds, assumption = [], ""
		for cmd in self.context.bot.commands:
			if distance(string, cmd.name) <= len(cmd.name)/2:
				possible_cmds.append(cmd.name)
		if possible_cmds != []:
			cmds_str = "\n".join(f"`{cmd}`" for cmd in possible_cmds)
			assumption = f" –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É:\n{cmds_str}"
		await self.context.reply(f"–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã - `{string.replace('`', ' ')}`.{assumption}", allowed_mentions=no_ping)

	async def subcommand_not_found(self, cmd, string) -> str:
		await CustomHelpCommand.send_command_help(self, cmd)

	async def send_cog_help(self, cog):
		await CustomHelpCommand.command_not_found(self, cog.qualified_name)


class GeneralCommands(commands.Cog, name="–û–±—â–∏–µ"):
	def __init__(self, bot):
		self._original_help_command = bot.help_command
		bot.help_command = CustomHelpCommand(command_attrs=help_attrs)
		bot.help_command.cog = self
		self.bot = bot

	def cog_unload(self):
		self.bot.help_command = self._original_help_command

	@commands.hybrid_command(name="server-info", aliases=["info", "server", "si", "—Å–µ—Ä–≤–µ—Ä-–∏–Ω—Ñ–æ", "–∏–Ω—Ñ–æ", "—Å–µ—Ä–≤–µ—Ä", "—Å–∏", "—ã—É–∫–º—É–∫—à—Ç–∞—â", "—à—Ç–∞—â", "—ã—É–∫–º—É–∫", "—ã—à"],
		description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ")
	async def serverinfo(self, ctx):
		# setup vars
		server = ctx.guild
		member_count = 0
		bot_count = 0
		for member in server.members:
			if member.bot:
				bot_count += 1
			else:
				member_count += 1
		invitation_link = await ctx.channel.create_invite(max_age=86400)
		embed = discord.Embed(title=server.name, color=server.owner.color)
		embed.set_thumbnail(url=server.icon.url)
		embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü", value=f"{Emojis.crown} <@{server.owner_id}>", inline=False)
		embed.add_field(name="–°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω", value=f"{Emojis.calendar} <t:{int(server.created_at.timestamp())}>", inline=False)
		embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value=f"{Emojis.users} {member_count} ‚Ä¢ {Emojis.bot} {bot_count}", inline=False)
		embed.add_field(name="–ö–∞–Ω–∞–ª—ã", value=f"{Emojis.text_channel} {len(server.text_channels)} ‚Ä¢ {Emojis.speaker} {len(server.voice_channels)} ‚Ä¢ {Emojis.chat_type} {len(server.forums)}", inline=False)
		embed.add_field(name="–†–æ–ª–∏", value=f"{Emojis.role} {len(server.roles)}", inline=False)
		embed.add_field(name="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–∏—Å—Å—è–∫–∞–µ—Ç —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏)", value=f"{Emojis.link} {invitation_link}")
		embed.set_footer(text=f"üÜî {server.id}")
		await ctx.reply(embed=embed, allowed_mentions=no_ping)
		
	@commands.hybrid_command(aliases=["usr", "u", "—é–∑–µ—Ä", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "—É—Å–µ—Ä", "–≥—ã—É–∫", "–≥—ã–∫", "–≥"],
		description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
	@app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å")
	async def user(self, ctx, user:discord.Member=None):
		# Setting up vars
		if user == None:
			user = ctx.author
		statuses = {
			"online": "üü¢ –í —Å–µ—Ç–∏",
			"offline": "‚ö´ –ù–µ –≤ —Å–µ—Ç–∏",
			"idle": "üü° –û—Ç–æ—à—ë–ª",
			"dnd": "üî¥ –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å",
			"invisible": "‚ö´ –ù–µ–≤–∏–¥–∏–º–∫–∞"
		}
		embed = discord.Embed(title=user.display_name, color=user.color)
		embed.set_thumbnail(url=user.avatar.url)
		embed.add_field(name="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", value=f"{Emojis.calendar} <t:{int(user.joined_at.timestamp())}>", inline=False)
		embed.add_field(name="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(–∞—Å—å)", value=f"{Emojis.calendar} <t:{int(user.created_at.timestamp())}>", inline=False)
		embed.add_field(name="–†–æ–ª–∏", value=" ".join([role.mention for role in user.roles[1:][::-1]]), inline=False)
		embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=statuses[str(user.status)], inline=False)
		embed.set_footer(text=f"üÜî {user.id}")
		await ctx.reply(embed=embed, allowed_mentions=no_ping)
	
	@commands.hybrid_command(aliases=["s", "—Å–∫–∞–∑–∞—Ç—å", "–º–æ–ª–≤–∏—Ç—å", "—Å–µ–π", "—Å—ç–π", "—ã—Ñ–Ω", "—ã"],
		description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞")
	@app_commands.describe(text="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –±–æ—Ç")
	@app_commands.default_permissions(manage_messages=True)
	async def say(self, ctx, *, text: str):
		temp = await ctx.send("_ _", ephemeral=True)
		await ctx.channel.send(text)
		await temp.delete()
		await ctx.message.delete()
	@say.error
	async def say_error(self, ctx, error):
		if isinstance(error, commands.MissingRequiredArgument):
			await ctx.reply(f"{Emojis.exclamation_mark} –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞–∑–∞—Ç—å –æ—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏")

	@commands.hybrid_command(aliases=["reminder", "rem", "alarm", "remind-me", "remindme", "–Ω–∞–ø–æ–º–Ω–∏—Ç—å", "–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å", "–Ω–∞–ø–æ–º–Ω–∏", "–±—É–¥–∏–ª—å–Ω–∏–∫", "–Ω–∞–ø", "–∫—É—å—à—Ç–≤", "–∫—É—å—à—Ç–≤—É–∫", "–∫—É—å", "—Ñ–¥—Ñ–∫—å", "–∫—É—å—à—Ç–≤-—å—É", "–∫—É—å—à—Ç–≤—å—É"],
		description="–ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —á—ë–º-—Ç–æ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é –ø–∏–Ω–≥–∞.")
	@app_commands.describe(time="–í—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –ø–∏–Ω–≥–∞–Ω—ë—Ç", reason="–ü—Ä–∏—á–∏–Ω–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–∏–º–∏–Ω–∞—Ç—å")
	async def remind(self, ctx, time:str, *, reason:str):
		raw_time = findall(r"[0-9]+", time)
		measure = findall(r"[A-z–ê-—è]+", time)
		time = int(raw_time[0]) * time_multipliers[measure[0]]
		time_name = ""
		for key, values in time_names.items():
			if measure[0] in values: time_name = key
		user = ctx.author
		embed = discord.Embed(title="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", color=no_color)
		embed_reason = ""
		if reason != "":
			embed_reason = f"–ø–æ –ø—Ä–∏—á–∏–Ω–µ \"{reason}\""
		if time < 1262278080:
			if reason != "": embed.add_field(name=reason, value="", inline=False)
			await ctx.reply(f"–Ø –≤–∞—Å —É–ø–æ–º—è–Ω—É —á–µ—Ä–µ–∑ {raw_time[0]} {time_name} {embed_reason}", allowed_mentions=no_ping)
			await sleep(time)
			await ctx.send(user.mention,embed=embed)
		else:
			await ctx.reply(f"{Emojis.exclamation_mark} –í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏.", allowed_mentions=no_ping)
	@remind.error
	async def remind_error(self, ctx, error):
		error_msg = str(error)
		missing_args = {
			"time": f"{Emojis.exclamation_mark} –£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–≤—Ä–µ–º—è><–º–µ—Ä–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ>",
			"reason": f"{Emojis.exclamation_mark} –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
		}
		if isinstance(error, commands.MissingRequiredArgument):
			await ctx.reply(missing_args[error_msg.split(" ")[0]], allowed_mentions=no_ping, delete_after=4)
		elif "IndexError" in error_msg:
			await ctx.reply(missing_args["time"], allowed_mentions=no_ping, delete_after=4)
