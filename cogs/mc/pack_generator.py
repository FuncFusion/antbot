import discord

from utils.msg_utils import Emojis
from utils.validator import validate

import io
from string import ascii_lowercase, digits
from json import dumps
from zipfile import ZipFile, ZIP_DEFLATED
from Levenshtein import distance

class Templates:
	mcmeta = '{{\n\t"pack": {{\n\t\t"pack_format": {0},\n\t\t"description": "https://discord.gg/anthill-914772142300749854"\n\t}}\n}}'
	load_json = {"values": ["namespace:load"]}
	tick_json = {"values": ["namespace:tick"]}
	load = "say –≠—Ç–æ –ª–æ–∞–¥ —Ñ—É–Ω–∫—Ü–∏—è"
	tick = "# –≠—Ç–æ —Ç–∏–∫ —Ñ—É–Ω–∫—Ü–∏—è"
	custom_model_data = '{{\n\t"parent": "item/generated",\n\t"textures": {{\n\t\t"layer0": "<–ø—É—Ç—å –∫ —Ç–µ–∫—Å—Ç—É—Ä–µ>"\n\t}},\n\t"overrides": [\n\t\t{{ "predicate": {{ "custom_model_data": {0} }}, "model": "item/cosmetics/eye_patch"}},\n\t]}}'


class PGenerator:
	def validate_folders(folders, type):
		dp_folders = {
			"advancement": ["–∞–¥–≤–∞–Ω—Ü–º–µ–Ω—Ç", "–∞—á–∏–≤–∫–∏", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"],
			"chat_type": ["—á–∞—Ç —Ç–∞–π–ø", "—Ç–∏–ø —á–∞—Ç–∞"],
			"damage_type": ["–¥—ç–º–µ–¥–∂ —Ç–∞–π–ø", "—Ç–∏–ø —É—Ä–æ–Ω–∞"],
			"dimension": ["–¥–∏–º–µ–Ω—à–æ–Ω", "–∏–∑–º–µ—Ä–µ–Ω–∏–µ"],
			"dimension_type": ["–¥–∏–º–µ–Ω—à–æ–Ω —Ç–∞–π–ø", "—Ç–∏–ø –∏–∑–º–µ—Ä–µ–Ω–∏—è"],
			"loot_tables": ["–ª—É—Ç —Ç–µ–π–±–ª—ã", "—Ç–∞–±–ª–∏—Ü—ã –ª—É—Ç–∞", "—Ç–∞–±–ª–∏—Ü—ã –¥–æ–±—ã—á–∏"],
			"predicates": ["–ø—Ä–µ–¥–∏–∫–µ–π—Ç—Å", "–ø—Ä–µ–¥–∏–∫–∞—Ç—ã"],
			"recipes": ["—Ä–µ—Å–∏–ø–∏—Å", "—Ä–µ—Ü–µ–ø—Ç—ã", "—Ä–µ—Ü–µ–ø—Ç—ã –∫—Ä–∞—Ñ—Ç–∞"],
			"structures": ["—Å—Ç—Ä–∞–∫—á–µ—Ä—Å", "—Å—Ç—Ä—É–∫—Ç—É—Ä—ã", "–¥–∞–Ω–∂–∏"],
			"tags": ["—Ç—ç–≥—Å", "—Ç–µ–≥–∏", "—è—Ä–ª—ã–∫–∏"],
			"worldgen": ["–≤–æ—Ä–ª–¥–≥–µ–Ω", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏—Ä–∞"]
			}
		rp_folders = {
			"atlases": ["–∞—Ç–ª–∞—Å—ã"],
			"blockstates": ["–±–ª–æ–∫—Å—Ç–µ–π—Ç—Å", "–±–ª–æ–∫ —Å—Ç–µ–π—Ç—ã", "—Å–æ—Å—Ç–æ—è–Ω–∏—è –±–ª–æ–∫–æ–≤"],
			"font": ["—Ñ–æ–Ω—Ç", "—à—Ä–∏—Ñ—Ç"],
			"lang": ["–ª—ç–Ω–≥", "—è–∑—ã–∫"],
			"modles": ["–º–æ–¥–µ–ª—Å", "–º–æ–¥–µ–ª–∏"],
			"particles": ["–ø–∞—Ä—Ç–∏–∫–ª—Å", "–ø–∞—Ä—Ç–∏–∫–ª—ã", "—á–∞—Å—Ç–∏—Ü—ã"],
			"shaders": ["—à–µ–π–¥–µ—Ä—Å", "—à–µ–π–¥–µ—Ä—ã", "—Ç—ë–º–Ω–∞—è –º–∞–≥–∏—è"],
			"texts": ["—Ç–µ–∫—Å—Ç—Å", "—Ç–µ–∫—Å—Ç–∞", "—Å—Ç—Ä–æ–∫–∏"],
			"textures": ["—Ç–µ—â—É—Ä—Å", "—Ç–µ–∫—Å—Ç—É—Ä—ã"]
		}
		existing_fldrs = dp_folders if type == "dp" else rp_folders
		valid_folders = set()
		for folder in folders:
			valid_folder = validate(folder, existing_fldrs)
			if valid_folder != None:
				valid_folders.add(valid_folder)
		return list(valid_folders)
	
	def validate_namespaces(namespaces):
		valid_chars = ascii_lowercase + digits + "_-" 
		valid_namespaces = set()
		curr_nspc = ""
		for nspc in namespaces:
			for char in nspc:
				if char in valid_chars:
					curr_nspc += char
			if curr_nspc != "":
				valid_namespaces.add(curr_nspc)
		return list(valid_namespaces)

	def datapack(name="–¥–µ—Ç–∞—Ä–∞–∫", namespaces=["namespace"], folders_include=[], folders_exclude=[], version=32):
		# Validating stuff
		folders_include = PGenerator.validate_folders(folders_include, "dp")
		folders_exclude = PGenerator.validate_folders(folders_exclude, "dp")
		namespaces = PGenerator.validate_namespaces(namespaces)
		main_namespace = "namespace" if namespaces == [] else namespaces[0]
		all_folders = ["advancement", "chat_type", "damage_type", "dimension", "dimension_type", "functions", "loot_tables", "predicates", "recipes", "structures", "tags", "worldgen"]
		# Generating dp
		dp_f = io.BytesIO()
		with ZipFile(dp_f, "w") as dp:
			dp.writestr(f"{name}/pack.mcmeta", Templates.mcmeta.format(version))
			dp.writestr(f"{name}/data/minecraft/tags/functions/load.json", dumps(Templates.load_json, indent="\t"))
			dp.writestr(f"{name}/data/minecraft/tags/functions/tick.json", dumps(Templates.tick_json, indent="\t"))
			dp.writestr(f"{name}/data/{main_namespace}/functions/load.mcfunction", Templates.load)
			dp.writestr(f"{name}/data/{main_namespace}/functions/tick.mcfunction", Templates.tick)
			for namespace in namespaces:
				dp.mkdir(f"{name}/data/{namespace}")
			if folders_exclude == []:
				if folders_include == []:
					for folder in all_folders:
						dp.mkdir(f"{name}/data/{main_namespace}/{folder}")
				else:
					for folder in folders_include:
						dp.mkdir(f"{name}/data/{main_namespace}/{folder}")
		dp_f.seek(0)
		return dp_f
	
	def resourcepack(name="—Ä–µ–ø—É–∫—Å—Ä–∞–∫", namespaces=[], folders_include=[], folders_exclude=[], version=32):
		# Validating stuff
		all_folders = ["atlases", "blockstates", "font", "lang", "models", "particles", "shaders", "texts", "textures"]
		folders_include = PGenerator.validate_folders(folders_include, "rp"); folders_include = folders_include if folders_include != [] else all_folders
		folders_exclude = PGenerator.validate_folders(folders_exclude, "rp")
		namespaces = PGenerator.validate_namespaces(namespaces)
		main_namespace = "namespace" if namespaces == [] else namespaces[0]
		# Generating rp
		rp_f = io.BytesIO()
		with ZipFile(rp_f, "w") as rp:
			rp.writestr(f"{name}/pack.mcmeta", Templates.mcmeta.format(version))
			if "models" in folders_include:
				rp.writestr(f"{name}/assets/minecraft/models/item/custom_model_data.json", Templates.custom_model_data.format(str(version)))
			for namespace in namespaces:
				rp.mkdir(f"{name}/assets/{namespace}")
			if folders_exclude == []:
				for folder in folders_include:
					rp.mkdir(f"{name}/assets/minecraft/{folder}")
		rp_f.seek(0)
		return rp_f


class Modals:
	class DP(discord.ui.Modal):
		def __init__(self):
			super().__init__(title=f"üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç–∞–ø–∞–∫–∞")
			self.custom_id="template:datapack"

		name = discord.ui.TextInput(
			required=False,
			label="–ù–∞–∑–≤–∞–Ω–∏–µ",
			placeholder="–ú–æ–π –∫—É—Ä—Ç–æ–π –¥–∞—Ç–∞–ø–∞–∫",
			max_length=64
		)
		namespaces = discord.ui.TextInput(
			required=False,
			label="–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º—ë–Ω",
			placeholder="my_dp, raycasts, ...",
			max_length=512
		)
		folders_include = discord.ui.TextInput(
			required=False,
			label="–í–∫–ª—é—á–∏—Ç—å –ø–∞–ø–∫–∏ (–≤—Å–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
			placeholder="functions, –ª—É—Ç —Ç–µ–π–±–ª—ã, tags, ...",
			max_length=512
		)
		folders_exclude = discord.ui.TextInput(
			required=False,
			label="–ò—Å–∫–ª—é—á–∏—Ç—å –ø–∞–ø–∫–∏",
			placeholder="functions, –ª—É—Ç —Ç–µ–π–±–ª—ã, tags, ...",
			max_length=512
		)
		version = discord.ui.TextInput(
			required=False,
			label="–í–µ—Ä—Å–∏—è",
			placeholder="–ü–æ—Å–ª–µ–¥–Ω—è—è/1.19.4/32",
			max_length=10
		)
		async def on_submit(self, Interaction: discord.Interaction):
			dp = PGenerator.datapack(
				self.name.value if self.name.value != "" else "datapak", 
				self.namespaces.value.replace(" ", "").split(),
				self.folders_include.value.replace(" ", "").split(), 
				self.folders_exclude.value.replace(" ", "").split(), 
				self.version.value if self.version.value != "" else 32
				)
			await Interaction.response.send_message(f"{Emojis.deta_rack} –ö–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–∞—Ç–∞–ø–∞–∫–∞", file=discord.File(dp, filename="Custom datapack.zip"))
	
	class RP(discord.ui.Modal):
		def __init__(self):
			super().__init__(title=f"üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞")
			self.custom_id="template:resourcepack"

		name = discord.ui.TextInput(
			required=False,
			label="–ù–∞–∑–≤–∞–Ω–∏–µ",
			placeholder="–ú–æ–π –∫—É—Ä—Ç–æ–π —Ä–µ—Å—É—Ä—Å–ø–∞–∫",
			max_length=64
		)
		namespaces = discord.ui.TextInput(
			required=False,
			label="–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º—ë–Ω",
			placeholder="my_rp, essential, ...",
			max_length=512
		)
		folders_include = discord.ui.TextInput(
			required=False,
			label="–í–∫–ª—é—á–∏—Ç—å –ø–∞–ø–∫–∏",
			placeholder="models, —à–µ–π–¥–µ—Ä—ã, enviroment, ...",
			max_length=512
		)
		folders_exclude = discord.ui.TextInput(
			required=False,
			label="–ò—Å–∫–ª—é—á–∏—Ç—å –ø–∞–ø–∫–∏",
			placeholder="models, —à–µ–π–¥–µ—Ä—ã, enviroment, ...",
			max_length=512
		)
		version = discord.ui.TextInput(
			required=False,
			label="–í–µ—Ä—Å–∏—è",
			placeholder="–ü–æ—Å–ª–µ–¥–Ω—è—è/1.19.4/27",
			max_length=10
		)
		async def on_submit(self, Interaction: discord.Interaction):
			rp = PGenerator.resourcepack(
				self.name.value if self.name.value != "" else "repuksrack", 
				self.namespaces.value.replace(" ", "").split(),
				self.folders_include.value.replace(" ", "").split(), 
				self.folders_exclude.value.replace(" ", "").split(), 
				self.version.value if self.version.value != "" else 32
				)
			await Interaction.response.send_message(f"{Emojis.resource_rack} –ö–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞", file=discord.File(rp, filename="Custom resourcepack.zip"))

