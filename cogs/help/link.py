import discord
from discord.ext import commands
from discord import app_commands

from typing import List
from json import load

from utils.general import handle_errors
from utils.msg_utils import Emojis
from utils.shortcuts import no_color, no_ping
from utils.validator import closest_match, all_valid
from settings import DMS_LOGS_GUILD_ID
import re


with open("assets/links.json", "r", encoding="utf-8") as f:
	links = load(f)
offered_links = [app_commands.Choice(name=links[link][0], value=links[link][0]) for link in links][:25]


class LinkCommand(commands.Cog):
	def __init__(self, bot):
		self.bot = bot

	@commands.hybrid_command(
		aliases=["l", "–ª", "–ª–∏–Ω–∫", "—Å—Å—ã–ª–∫–∞", "–¥—à—Ç–ª", "ccskrf", "resource","—Ä–µ—Å—É—Ä—Å","–¥"],
		description="–°–∫–∏–¥—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Å—É—Ä—Å.",
		usage="`/link <–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞>`",
		help="–ù–∞–ø–∏—Å–∞–≤ –ø—Ä–æ—Å—Ç–æ `/link`, –≤ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–µ —É–≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤. –¢–∞–º –º–∞–∫—Å–∏–º—É–º –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è 25 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞, –∏ –æ–Ω —Ç–∞–º –ø–æ—è–≤–∏—Ç—Å—è. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ `üêú„Éªantbot`.\n### –ü—Ä–∏–º–µ—Ä:\n`/link dp essentials`")

	async def link(self, ctx, *, resource):
		resource_link = closest_match(resource, links, 10)
		if resource_link == None:
			raise AttributeError("Not Found")
		await ctx.reply(f"## {Emojis.link} [{links[resource_link][0]}]({resource_link})", allowed_mentions=no_ping)

	@commands.Cog.listener("on_message")
	async def link_msg(self, msg):
		if msg.author.bot:
			return
		if msg.guild != None and msg.guild.id == DMS_LOGS_GUILD_ID:
			return
		segments = re.findall(r'(?:\*\*[Ll–ª–ª]\*\*)([^?*]+)(?:\*\*[Ll–ª–ª]\*\*)*?', msg.content)
		if segments == []:
			return
		args = []
		for segment in segments:
			words = re.findall(r'\S+', segment)
			for i in range(len(words)):
				args.append(' '.join(words[:i+1]))
		resource_links = []
		for arg in args:
			resource_name = closest_match(arg, links, accuracy=12)
			if resource_name != None and resource_name not in resource_links:
				print(arg, resource_name)
				resource_links.append(resource_name)
		if resource_links == []:
			await handle_errors(msg, AttributeError("Not Found"), [{
				"exception": AttributeError,
				"msg": "–°—Å—ã–ª–∫–∞ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
			}])
		for resource_link in resource_links[:3]:
			await msg.reply(f"## {Emojis.link} [{links[resource_link][0]}]({resource_link})", allowed_mentions=no_ping)
	
	@link.error
	async def link_error(self, ctx, error):
		await handle_errors(ctx, error, [
			{
				"exception": commands.MissingRequiredArgument,
				"msg": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **—Å–ª—ç—à** –∫–æ–º–∞–Ω–¥—É </link:1267188435492405359>, –≥–¥–µ –≤ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤."
			},
			{
				"contains": "Not Found",
				"msg": "–°—Å—ã–ª–∫–∞ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
			}
		])
	
	@link.autocomplete("resource")
	async def link_autocomplete(self, ctx: discord.Interaction, curr: str) -> List[app_commands.Choice[str]]:
		global offered_links
		if curr != "":
			return [app_commands.Choice(name=links[link][0], value=links[link][0]) for link in all_valid(curr, links)][:25]
		else:
			return offered_links