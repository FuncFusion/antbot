import discord
from discord.ext import commands
from discord import app_commands
import re
import requests
from Levenshtein import distance
from bs4 import BeautifulSoup

from utils.emojis import Emojis
from utils.highlighter.main import Highlighter as hl
from utils.fake_user import fake_send
from utils.shortcuts import no_ping, no_color
from utils.msg_utils import unknown_error
from utils.msg_utils import get_msg_by_id_arg

code_block_content_re = r"```[a-zA-Z+]+\n|```\n?"

## Getting pack formats
pf_req = requests.get("https://minecraft.wiki/w/Pack_format",timeout=10)
pf_content = BeautifulSoup(pf_req.content, "html.parser")

class MinecraftCommands(commands.Cog, name="–ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç"):
	def __init__(self, bot):

		@bot.hybrid_command(aliases=["hl", "—Ä–¥","—Ö–∞–π–ª–∞–π—Ç", "—Ö–ª"],
							description="–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è mcfunction")
		async def highlight(ctx, *, command:str=None):
			# Setting up vars
			message = ""
			if command == None:
				if (reply:=ctx.message.reference) != None:
					reply_message = await ctx.channel.fetch_message(reply.message_id)
					reply_message = reply_message.content
					if "```" in reply_message:
						for code_block in re.split(code_block_content_re, reply_message)[1::2]:
							message += f"```ansi\n{hl.highlight(code_block)}```"
					else:
						message += f"```ansi\n{hl.highlight(reply_message)}```"
				else:
					raise Exception("Missing arg")
			else:
				if "```" in command:
					for code_block in re.split(code_block_content_re, command)[1::2]:
						message += f"```ansi\n{hl.highlight(code_block)}```"
				else:
					message += f"```ansi\n{hl.highlight(command)}```"
			# Building embed
			embed = discord.Embed(title=f"{Emojis.sparkles} –ü–æ–¥—Å–≤–µ—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è" if message.count("```") == 2 else "–ü–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", color=no_color, description=message)
			await ctx.reply(embed=embed, allowed_mentions=no_ping)
		@highlight.error
		async def hl_error(ctx, error):
			error_msg = str(error)
			if "Missing arg" in error_msg:
				await ctx.reply("‚ùó –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏/–æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π", allowed_mentions=no_ping)
	
		@bot.tree.context_menu(name=f"üåà–ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é")
		async def highlight_ctxmenu(interaction: discord.Interaction, message:discord.Message):
			# Setting up variables
			code_block_re = r"```[^`]+```"
			if interaction.user == message.author:
				mcfed_message = " " + message.content
				if "```" in message.content:
					for code_block, code_block_content in zip(re.findall(code_block_re, message.content), re.split(code_block_content_re, message.content)[1::2]):
						mcfed_message = mcfed_message.replace(code_block, f"```ansi\n{hl.highlight(code_block_content)}```")
				else:
					mcfed_message = f"```ansi\n{hl.highlight(message.content)}```"
				await fake_send(interaction.user, interaction.channel, content=mcfed_message)
				await interaction.response.send_message(f"{Emojis.sparkles} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–æ–¥—Å–≤–µ—á–µ–Ω–æ", ephemeral=True)
				await message.delete()
			else:
				mcfed_message = ""
				if "```" in message.content:
					for code_block in re.split(code_block_content_re, message.content)[1::2]:
						mcfed_message += f"```ansi\n{hl.highlight(code_block)}```"
				else:
					mcfed_message += f"```ansi\n{hl.highlight(message.content)}```"
				# Building embed
				embed = discord.Embed(title=f"{Emojis.sparkles} –ü–æ–¥—Å–≤–µ—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è" if message.content.count("```") == 2 else "–ü–æ–¥—Å–≤–µ—á–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", color=no_color, description=mcfed_message)
				await interaction.response.send_message(embed=embed)

		@bot.hybrid_command(aliases=["mcmetaformat","pack-format","pack_format",
							   "packmcmetaformat","pf","–ø–∞–∫—Ñ–æ—Ä–º–∞—Ç","–ø–∞–∫-—Ñ–æ—Ä–º–∞—Ç",
							   "–ø–∞–∫_—Ñ–æ—Ä–º–∞—Ç", "–º—Å–º–µ—Ç–∞—Ñ–æ—Ä–º–∞—Ç", "–ø–∞–∫–º—Å–º–µ—Ç–∞—Ñ–æ—Ä–º–∞—Ç",
							   "–ø—Ñ", "–∑—Ñ—Å–ª–∞—â–∫—å—Ñ–µ", "–∑–∞"], description="–í—ã–¥–∞—ë—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–µ—Ä—Å–∏—è–º –≤ pack_format")
		@app_commands.describe(type="–ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–∞ –¥–ª—è —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞ –∏–ª–∏ –¥–∞—Ç–∞–ø–∞–∫–∞", show_all="–ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–∞ –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π –∏ —Å–Ω–∞–ø—à–æ—Ç–æ–≤")
		async def packformat(ctx, type, *, show_all=""):			
			dp_types = ["datapack", "dp", "data", "–¥–∞—Ç–∞–ø–∞–∫", "–¥–ø", "–¥–∞—Ç–∞"]
			rp_types = ["resourcepack", "rp", "resource", "—Ä–µ—Å—É—Ä—Å–ø–∞–∫", "—Ä–ø", "—Ä–µ—Å—É—Ä—Å"]
			table, title, desc = None, "", ""
			for arg in rp_types:
				if distance(type, arg) <= round(len(arg))/3:
					title = f"{Emojis.pack_mcmeta2} –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª `pack_format` —É —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞"
					table = pf_content.find("tbody")
			if table == None:
				for arg in dp_types:
					if distance(type, arg) <= round(len(arg))/3:
						title = f"{Emojis.pack_mcmeta2} –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª `pack_format` —É –¥–∞—Ç–∞–ø–∞–∫–∞"
						table = pf_content.find_all("table")[1]
			for row in table.find_all("tr"):
					cells = row.find_all("td")
					if len(cells) >= 2:
						num = cells[0].get_text()
						version = cells[1].get_text()
						release = cells[2].get_text()
						if show_all != "":
							title = title.replace("–°", "–ü–æ–ª–Ω—ã–π —Å")
							desc += f"`{num}` ‚Äî `{version}`\n"
						else:
							if release != "‚Äì":
								desc += f"`{num}` ‚Äî `{release}`\n"
			embed = discord.Embed(title=title, color=no_color)
			embed.add_field(name="–ß–∏—Å–ª–æ ‚Äî –í–µ—Ä—Å–∏–∏", value=desc)
			await ctx.reply(embed=embed, allowed_mentions=no_ping)
		@packformat.error
		async def packformat_error(ctx, error: Exception):
			error_msg = str(error)
			if isinstance(error, commands.MissingRequiredArgument):
				await ctx.reply("‚ùó –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.", allowed_mentions=no_ping)
			elif error_msg.find("AttributeError"):
				await ctx.reply("‚ùó –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –ø–∞–∫—Ñ–æ—Ä–º–∞—Ç–∞", allowed_mentions=no_ping)
			else:
				await unknown_error(ctx, error)