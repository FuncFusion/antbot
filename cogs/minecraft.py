import discord
from discord.ext import commands
from discord import app_commands

from typing import List
from math import ceil
import re
import requests
from Levenshtein import distance
from bs4 import BeautifulSoup

from cogs.mc.pack_generator import PGenerator, Modals
from cogs.mc.highlighter.main import Hl as hl

from utils.general import handle_errors
from utils.validator import validate
from utils.msg_utils import Emojis
from utils.shortcuts import no_ping, no_color
from utils.fake_user import fake_send
from utils.msg_utils import unknown_error
from utils.tree_gen import generate_tree

code_block_content_re = r"```[a-zA-Z+]+\n|```\n?"

pf_req = requests.get("https://minecraft.wiki/w/Pack_format",timeout=10)
pf_content = BeautifulSoup(pf_req.content, "html.parser")

class MinecraftCommands(commands.Cog, name="–ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç"):
	def __init__(self, bot):
		self.bot = bot
		self.bot.tree.add_command(app_commands.ContextMenu(
			name="üåà–ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é",
			callback=self.highlight_ctxmenu
		))

	@commands.hybrid_command(aliases=["hl", "—Ä–¥","—Ö–∞–π–ª–∞–π—Ç", "—Ö–ª"], description="–ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è mcfunction")
	@app_commands.describe(function="mcfunction —Ñ—É–Ω–∫—Ü–∏—è")
	async def highlight(self, ctx, *, function:str=None):
		highlighted = ""
		if function == None:
			if (reply:=ctx.message.reference) != None:
				reply_message = await ctx.channel.fetch_message(reply.message_id)
				reply_message = reply_message.content
				if "```" in reply_message:
					for code_block in re.split(code_block_content_re, reply_message)[1::2]:
						highlighted += f"```ansi\n{hl.highlight(code_block)}```"
				else:
					highlighted += f"```ansi\n{hl.highlight(reply_message)}```"
			else:
				raise Exception("Missing arg")
		else:
			if "```" in function:
				for code_block in re.split(code_block_content_re, function)[1::2]:
					highlighted += f"```ansi\n{hl.highlight(code_block)}```"
			else:
				highlighted += f"```ansi\n{hl.highlight(function)}```"
		await ctx.reply(content=highlighted, allowed_mentions=no_ping)
	@highlight.error
	async def hl_error(self, ctx, error):
		await handle_errors(ctx, error, [
			{
				"contains": "Missing arg",
				"msg": "{Emojis.exclamation_mark} –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏/–æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π"
			}
		])
	
	async def highlight_ctxmenu(self, interaction: discord.Interaction, message:discord.Message):
		code_block_re = r"```[^`]+```"
		if interaction.user == message.author:
			highlighted = " " + message.content
			await interaction.response.send_message(f"{Emojis.sparkles} –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–æ–¥—Å–≤–µ—á–µ–Ω–æ", ephemeral=True)
			await message.delete()
			if "```" in message.content:
				for code_block, code_block_content in zip(re.findall(code_block_re, message.content), \
					re.split(code_block_content_re, message.content)[1::2]):
					highlighted = highlighted.replace(code_block, f"```ansi\n{hl.highlight(code_block_content)}```")
			else:
				highlighted = f"```ansi\n{hl.highlight(message.content)}```"
			if (hl_len:=len(highlighted)) > 2000:
				highlighted = hl.split_msg(highlighted)
				print(highlighted)
			await fake_send(interaction.user, interaction.channel, content=highlighted)
		else:
			highlighted = ""
			if "```" in message.content:
				for code_block in re.split(code_block_content_re, message.content)[1::2]:
					highlighted += f"```ansi\n{hl.highlight(code_block)}```"
			else:
				highlighted += f"```ansi\n{hl.highlight(message.content)}```"
			# Building embed
			await interaction.response.send_message(content=highlighted)

	@commands.hybrid_command(aliases=["mcmetaformat","pack-format","pack_format",
		"packmcmetaformat","pf","–ø–∞–∫—Ñ–æ—Ä–º–∞—Ç","–ø–∞–∫-—Ñ–æ—Ä–º–∞—Ç",
		"–ø–∞–∫_—Ñ–æ—Ä–º–∞—Ç", "–º—Å–º–µ—Ç–∞—Ñ–æ—Ä–º–∞—Ç", "–ø–∞–∫–º—Å–º–µ—Ç–∞—Ñ–æ—Ä–º–∞—Ç",
		"–ø—Ñ", "–∑—Ñ—Å–ª–∞—â–∫—å—Ñ–µ", "–∑–∞"], 
		description="–í—ã–¥–∞—ë—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–µ—Ä—Å–∏—è–º –≤ pack_format")
	@app_commands.describe(type="–ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–∞ –¥–ª—è —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞ –∏–ª–∏ –¥–∞—Ç–∞–ø–∞–∫–∞", 
		show_all="–ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–∞ –¥–ª—è –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π –∏ —Å–Ω–∞–ø—à–æ—Ç–æ–≤")
	async def packformat(self, ctx, type, *, show_all=""):			
		dp_types = ["datapack", "dp", "data", "–¥–∞—Ç–∞–ø–∞–∫", "–¥–ø", "–¥–∞—Ç–∞"]
		rp_types = ["resourcepack", "rp", "resource", "—Ä–µ—Å—É—Ä—Å–ø–∞–∫", "—Ä–ø", "—Ä–µ—Å—É—Ä—Å"]
		table, title, desc = None, "", ""
		for arg in rp_types:
			if distance(type, arg) <= round(len(arg))/3:
				title = f"{Emojis.pack_mcmeta2} –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª `pack_format` —É —Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞"
				table = pf_content.find("tbody")
		if table == None:
			for arg in dp_types:
				if distance(type, arg) <= round(len(arg))/3:
					title = f"{Emojis.pack_mcmeta2} –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª `pack_format` —É –¥–∞—Ç–∞–ø–∞–∫–∞"
					table = pf_content.find_all("table")[1]
		for row in table.find_all("tr"):
				cells = row.find_all("td")
				if len(cells) >= 2:
					num = cells[0].get_text()
					version = cells[1].get_text()
					release = cells[2].get_text()
					if show_all != "":
						title = title.replace("–°", "–ü–æ–ª–Ω—ã–π —Å")
						desc += f"`{num}` ‚Äî `{version}`\n"
					else:
						if release != "‚Äì":
							desc += f"`{num}` ‚Äî `{release[:-1]}`\n"
		embed = discord.Embed(title=title, color=no_color)
		embed.add_field(name="–ß–∏—Å–ª–æ ‚Äî –í–µ—Ä—Å–∏–∏", value=desc)
		embed.set_footer(text="–ë–æ–ª—å—à–µ –∏–Ω—Ñ—ã –≤ —Ñ–∞–∫—å—é—à–∫–µ \"?pack mcmeta\"")
		await ctx.reply(embed=embed, allowed_mentions=no_ping)
	@packformat.error
	async def packformat_error(self, ctx, error: Exception):
		await handle_errors(ctx, error, [
			{
				"exception": commands.MissingRequiredArgument,
				"msg": f"{Emojis.exclamation_mark} –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"
			},
			{
				"contains": "AttributeError",
				"msg": f"{Emojis.exclamation_mark} –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –ø–∞–∫—Ñ–æ—Ä–º–∞—Ç–∞"
			}
		])
	
	@commands.hybrid_command(aliases=["tl", "—Ç–µ–º–ø–ª–µ–π—Ç", "—Ç—ç–º–ø–ª–µ–π—Ç", "–µ—É—å–∑–¥—Ñ–µ—É", "—à–∞–±–ª–æ–Ω"],
		description="–°–æ–∑–¥–∞—ë—Ç —à–∞–±–ª–æ–Ω –¥–∞—Ç–∞–ø–∞–∫–∞/—Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞")
	@app_commands.describe(template="–î–∞—Ç–∞–ø–∞–∫/—Ä–µ—Å—É—Å—Ä–ø–∞–∫", type="–¢–∏–ø –ø–∞–∫–∞")
	async def template(self, ctx: commands.Context, template: str="datapack", type: str="basic"):
		pack_ctx = {
			"datapack": {"emoji": Emojis.deta_rack, "accusative": "–¥–∞—Ç–∞–ø–∞–∫–∞", "modal": Modals.DP},
			"resourcepack": {"emoji": Emojis.resource_rack, "accusative": "—Ä–µ—Å—É—Ä—Å–ø–∞–∫–∞", "modal": Modals.RP}
		}
		#Validating args
		if (v_template:=validate(template, {"datapack": ["dp", "–¥–ø", "–¥–∞—Ç–∞–ø–∞–∫", "–¥–µ—Ç–∞—Ä–∞–∫", "–ø–∞—Ç–∞–¥–∞–∫"], "resourcepack": ["rp", "—Ä–ø", "—Ä–µ—Å—É—Ä—Å–ø–∞–∫", "—Ä–µ–ø—É–∫—Å—Ä–∞–∫"]}))\
			!= None:
			template = v_template
		else:
			raise commands.BadArgument(template)
		if (v_type:=validate(type, {"basic": ["–±–∞–∑–æ–≤—ã–π", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", "–æ–±—ã—á–Ω—ã–π"], "extended": ["—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π", "–ø–æ–ª–Ω—ã–π"], "custom": ["–∫–∞—Å—Ç–æ–º—ã–Ω–π", "–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π"]}))\
			!= None:
			type = v_type
		else:
			raise commands.BadArgument(type)
		for arg in [template, type]:
			if arg == None:
				raise commands.BadArgument(f"{arg}")
		#
		if type == "custom":
			await ctx.interaction.response.send_modal(pack_ctx[template]["modal"]())
		elif type == "extended":
			with open(f"assets/templates/Extended {template}.zip", "rb") as pack:
				await ctx.send(f"{pack_ctx[template]["emoji"]} –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω {pack_ctx[template]["accusative"]}", 
				file=discord.File(pack, filename=f"Extended_{template}_(UNZIP).zip"))
		elif type == "basic":
			with open(f"assets/templates/Basic {template}.zip", "rb") as pack:
				await ctx.send(f"{pack_ctx[template]["emoji"]} –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω {pack_ctx[template]["accusative"]}", 
				file=discord.File(pack, filename=f"Basic_{template}_(UNZIP).zip"))
	@template.error
	async def template_error(self, ctx: commands.Context, error):
		await handle_errors(ctx, error, [
			{
				"exception": commands.MissingRequiredArgument,
				"msg": f"{Emojis.exclamation_mark} –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"
			},
			{
				"exception": commands.BadArgument,
				"msg": f"{Emojis.exclamation_mark} –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç"
			}
		])
	@template.autocomplete("template")
	async def template_autocomplete(self, ctx: discord.Interaction, curr: str) -> List[app_commands.Choice[str]]:
		return [app_commands.Choice(name="–î–∞—Ç–∞–ø–∞–∫", value="datapack"), app_commands.Choice(name="–†–µ—Å—É—Ä—Å–ø–∞–∫", value="resourcepack")]
	@template.autocomplete("type")
	async def template_autocomplete(self, ctx: discord.Interaction, curr: str) -> List[app_commands.Choice[str]]:
		return [app_commands.Choice(name="–ë–∞–∑–æ–≤—ã–π", value="basic"), app_commands.Choice(name="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π", value="extended"),
		  app_commands.Choice(name="–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π", value="custom")]
	
